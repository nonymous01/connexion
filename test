(venv) sagemaker-user@default:~/f1_ai_mlops_baseline$ python python_scripts/utils/f1ai_model_promoter.py 
Warning: Could not generate AWS temporary credentials. Please make sure you have the necessary permissions.
Traceback (most recent call last):
  File "/home/sagemaker-user/f1_ai_mlops_baseline/venv/lib/python3.12/site-packages/requests/models.py", line 974, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/sagemaker-user/f1_ai_mlops_baseline/python_scripts/utils/f1ai_model_promoter.py", line 19, in <module>
    process()
  File "/home/sagemaker-user/f1_ai_mlops_baseline/python_scripts/utils/f1ai_model_promoter.py", line 10, in process
    response_json = client.promote_model_registration(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sagemaker-user/f1_ai_mlops_baseline/venv/lib/python3.12/site-packages/f1ai_client/f1ai_client.py", line 1405, in promote_model_registration
    return _transform_response(response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sagemaker-user/f1_ai_mlops_baseline/venv/lib/python3.12/site-packages/f1ai_client/f1ai_client.py", line 21, in _transform_response
    result = response.json() if response.ok else json.loads(response.content)
             ^^^^^^^^^^^^^^^
  File "/home/sagemaker-user/f1_ai_mlops_baseline/venv/lib/python3.12/site-packages/requests/models.py", line 978, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
(venv) sagemaker-user@default:~/f1_ai_mlops_baseline$ 

le code est 

import re
import boto3
from datetime import datetime
import cfnresponse
import os
import shutil
import subprocess
import sys
import zipfile
import tempfile

requirements = os.environ['REQUIREMENTS']
s3_bucket = os.environ['S3_BUCKET']


def upload_file_to_s3(file_path, bucket, key):
    s3 = boto3.client('s3')
    s3.upload_file(file_path, bucket, key)
    print(f"Upload successful. {file_path} uploaded to {bucket}/{key}")


def make_zip_filename():
    now = datetime.now()
    timestamp = now.strftime('%Y%m%d_%H%M%S')
    filename = f'LambdaLayer_{timestamp}.zip'
    return filename


def zipdir(path, zipname):
    zipf = zipfile.ZipFile(zipname, 'w', zipfile.ZIP_DEFLATED)
    for root, dirs, files in os.walk(path):
        for file in files:
            zipf.write(os.path.join(root, file),
                       os.path.relpath(os.path.join(root, file),
                                       os.path.join(path, '..')))
    zipf.close()


def empty_bucket(bucket_name):
    s3_client = boto3.client('s3')
    response = s3_client.list_objects_v2(Bucket=bucket_name)
    if 'Contents' in response:
        keys = [{'Key': obj['Key']} for obj in response['Contents']]
        s3_client.delete_objects(Bucket=bucket_name, Delete={'Objects': keys})
    return


def lambda_handler(event, context):
    print("Event: ", event)
    responseData = {}
    reason = ""
    status = cfnresponse.SUCCESS

    def get_requirement_with_extras(requirement):
        requirement_match = re.match(r"\[(.+)\](.+)", requirement)
        if requirement_match:
            extra_instruction = requirement_match.group(1)
            package = requirement_match.group(2)
            return package, extra_instruction
        return requirement, None

    try:
        if event['RequestType'] != 'Delete':
            os.chdir('/tmp')
            # download Bedrock SDK
            installed = []
            requirements_list = requirements.split(" ")

            if os.path.exists("python"):
                shutil.rmtree("python")

            for requirement in requirements_list:
                requirement, extra = get_requirement_with_extras(requirement)
                is_zip_url = requirement.startswith("http") and requirement.endswith(".zip")

                if is_zip_url:
                    install_zip_package(requirement)

                if requirement and not is_zip_url:
                    install_pip_dep(requirement, extra)
                
                installed.append(requirement)
            
            print(installed)
            boto3_zip_name = make_zip_filename()
            zipdir("python", boto3_zip_name)

            print(f"uploading {boto3_zip_name} to s3 bucket {s3_bucket}")
            upload_file_to_s3(boto3_zip_name, s3_bucket, boto3_zip_name)
            responseData = {"Bucket": s3_bucket, "Key": boto3_zip_name}
        else:
            # delete - empty the bucket so it can be deleted by the stack.
            empty_bucket(s3_bucket)
    except Exception as e:
        print(e)
        status = cfnresponse.FAILED
        reason = f"Exception thrown: {e}"
    cfnresponse.send(event, context, status, responseData, reason=reason)


def install_zip_package(zip_url, target="python"):
    import ssl
    ssl._create_default_https_context = ssl._create_unverified_context
    from urllib.request import urlopen

    # Step 1: Download the repository as a zip file
    zip_path = os.path.join(tempfile.gettempdir(), "mlflow-export-import.zip")
    with urlopen(zip_url) as resp, open(zip_path, "wb") as out_file:
        out_file.write(resp.read())

    # Step 2: Unzip the downloaded file
    extract_dir = os.path.join(tempfile.gettempdir(), "mlflow-export-import-master")
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(tempfile.gettempdir())

    # Step 3: Install the package into the target directory (e.g. 'python')
    target_dir = os.path.abspath(target)
    os.makedirs(target_dir, exist_ok=True)

    package_dir = os.path.join(tempfile.gettempdir(), "mlflow-export-import-master")
    subprocess.check_call([
        sys.executable, "-m", "pip", "install", "--no-deps", package_dir, "--target", target_dir
    ])

    os.remove(zip_path)
    shutil.rmtree(package_dir, ignore_errors=True)


def install_pip_dep(requirement, extra=None):
    base_cmd = [
        sys.executable, "-m", "pip", "install", "--no-deps",
        "--platform", "manylinux2014_x86_64", "--only-binary=:all:", "-t", "python"
    ]
    if extra:
        base_cmd.extend([requirement, extra])
    else:
        base_cmd.append(requirement)

    try:
        subprocess.check_call(base_cmd)
    except subprocess.CalledProcessError as e:
        print(f"First install attempt for {requirement} failed. Retrying without --only-binary=:all:")
        fallback_cmd = [
            sys.executable, "-m", "pip", "install", "--no-deps", "-t", "python"
        ]
        if extra:
            fallback_cmd.extend([requirement, extra])
        else:
            fallback_cmd.append(requirement)
        subprocess.check_call(fallback_cmd)
