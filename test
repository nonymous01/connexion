def _transform_response(response, status_ok="SUCCESS", status_fail="FAILURE"):
    """
    Transform response with better error handling
    """
    try:
        response.raise_for_status()
        content_type = response.headers.get("Content-Type", "")

        if 'application/json' in content_type:
            try:
                result = response.json()
            except ValueError:
                print(" Failed to parse JSON. Raw response:")
                print(response.text[:300])
                raise RuntimeError("Invalid JSON in response")
        else:
            print(" Unexpected content type:", content_type)
            print(" Raw response:", response.text[:300])
            raise RuntimeError("Response is not JSON")

        if response.status_code == 403:
            raise RuntimeError("Access denied: either your token is invalid or access to the requested endpoint is not allowed")

        if not response.ok and 'success' not in result:
            raise RuntimeError(f"{response.reason=}, {response.content=}")

        if 'status' not in result:
            ok = result.get('success', False)
            result['status'] = status_ok if ok else status_fail

        result.pop('success', None)
        if 'error' in result:
            result['message'] = result.pop('error')

        return result

    except requests.exceptions.RequestException as e:
        print( Request failed:", e)
        print(" Raw response (if any):", getattr(response, "text", "")[:300])
        raise RuntimeError("Request failed") from e
