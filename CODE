def _get_request_context_authorizer(event: dict) -> dict:
    """
    Tries to get the authorizer from the request context in the event.
    If not present (e.g., invoked manually), returns a default authorizer.
    """
    node = event.get("context", event)
    
    request_context = node.get("requestContext")
    if not request_context:
        logger.warning(" No requestContext provided — assuming direct Lambda invocation.")
        return {
            "principalId": "anonymous",
            "claims": {}
        }

    authorizer = request_context.get("authorizer")
    if not authorizer:
        logger.warning(" No authorizer found in requestContext — using default.")
        return {
            "principalId": "anonymous",
            "claims": {}
        }

    return authorizer
