Status: Failed
Test Event Name: event

Response:
{
  "errorMessage": "Invalid event, no requestContext provided",
  "errorType": "RuntimeError",
  "requestId": "87745569-b72d-4295-9c7e-2ba903ea8b42",
  "stackTrace": [
    "  File \"/var/task/model_function.py\", line 137, in lambda_handler\n    result = dispatcher_helper.dispatch_method(dispatch_table, event)\n",
    "  File \"/var/task/utils/dispatcher_helper.py\", line 119, in dispatch_method\n    authorizer = _get_request_context_authorizer(event)\n",
    "  File \"/var/task/utils/dispatcher_helper.py\", line 47, in _get_request_context_authorizer\n    raise RuntimeError(\"Invalid event, no requestContext provided\")\n"
  ]
}

Function Logs:
[INFO]	2025-07-04T10:12:00.946Z		Found credentials in environment variables.
START RequestId: 87745569-b72d-4295-9c7e-2ba903ea8b42 Version: $LATEST
[INFO]	2025-07-04T10:12:01.174Z	87745569-b72d-4295-9c7e-2ba903ea8b42	Invokation params: {'action': 'promote_model_registration', 'model_name': 'irisclassifier', 'model_version': '1', 'model_source': 'databricks_registry', 'workspace_id': '6051921418418893', 'deployment_target': 'dev'}
[ERROR] RuntimeError: Invalid event, no requestContext provided
Traceback (most recent call last):
  File "/var/task/model_function.py", line 137, in lambda_handler
    result = dispatcher_helper.dispatch_method(dispatch_table, event)
  File "/var/task/utils/dispatcher_helper.py", line 119, in dispatch_method
    authorizer = _get_request_context_authorizer(event)
  File "/var/task/utils/dispatcher_helper.py", line 47, in _get_request_context_authorizer
    raise RuntimeError("Invalid event, no requestContext provided")
END RequestId: 87745569-b72d-4295-9c7e-2ba903ea8b42
REPORT RequestId: 87745569-b72d-4295-9c7e-2ba903ea8b42	Duration: 2.44 ms	Billed Duration: 3 ms	Memory Size: 1024 MB	Max Memory Used: 151 MB	Init Duration: 2216.15 ms

Request ID: 87745569-b72d-4295-9c7e-2ba903ea8b42


import ast
import json
import traceback
from datetime import date
from dateutil.relativedelta import relativedelta

import time
import logging

import utils.dispatcher_helper as dispatcher_helper
import utils.databricks_model_registry_helper as databricks_model_registry_helper
import utils.databricks_pipeline_helper as databricks_pipeline_helper

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def promote_model_registration(client_parameters: dict, deployment_parameters: dict):
    result = {}
    model_name = client_parameters["model_name"]
    model_version = client_parameters["model_version"]
    model_source = client_parameters["model_source"]

    try:
        databricks_model_registry_helper.init(deployment_parameters)

        response = databricks_model_registry_helper.promote_model_registration(
            model_name, model_version, model_source
        )      


        if response is not None:
            if isinstance(response, tuple) and len(response) > 1:
                result["message"] = response[1]
                result["success"] = True
            else:
                result["success"] = False

    except Exception as e:
        logger.error(f"Error promoting model", exc_info=True)
        result["success"] = False
        result["error"] = repr(e)

    return result


def describe_model_registration(client_parameters: dict, deployment_parameters: dict):
    result = {}
    print("# Describe model")

    model_name = client_parameters["model_name"]
    model_version = client_parameters["model_version"]

    try:
        databricks_model_registry_helper.init(deployment_parameters)

        model_version_response = (
            databricks_model_registry_helper.get_model_registration(
                model_name, model_version
            )
        )

        if model_version_response:
            if model_version_response["status"] == "READY":
                result["status"] = "AVAILABLE"
            else:
                result["status"] = "UNAVAILABLE"

            result["model_name"] = model_name
            result["model_version"] = model_version
            result["model_source"] = model_version_response["source"]
            result["model_stage"] = model_version_response["current_stage"]

            result["success"] = True

        else:
            result["success"] = False
            result["error"] = (
                f"Model {model_name} and {model_version} is not registered"
            )

    except Exception as e:
        logger.error(f"Error retrieving model information", exc_info=True)
        result["success"] = False
        result["error"] = repr(e)

    return result


def get_latest_model_registration(client_parameters: dict, deployment_parameters: dict):
    result = {}
    print("# Get model registration")

    model_name = client_parameters["model_name"]

    stage = client_parameters.get("stage")

    try:
        databricks_model_registry_helper.init(deployment_parameters)

        result["model_name"] = model_name

        model_version_response = (
            databricks_model_registry_helper.get_latest_model_registration(
                model_name, stage
            )
        )

        if model_version_response:
            result["model_version"] = model_version_response["version"]

            result["model_stage"] = model_version_response["current_stage"]

            result["model_source"] = model_version_response["source"]

        else:
            result["model_version"] = 0

        result["success"] = True

    except Exception as e:
        logger.error(f"Error retrieving model information", exc_info=True)
        result["success"] = False
        result["error"] = repr(e)

    return result


def lambda_handler(event, context):
    start = time.perf_counter()
    dispatch_table = {
        "describe_model_registry": describe_model_registration,
        "get_latest_model_registration": get_latest_model_registration,
        "promote_model_registration": promote_model_registration,
    }

    result = dispatcher_helper.dispatch_method(dispatch_table, event)
    duration = time.perf_counter() - start
    logger.info(f"handler completed in {duration:3f} seconds")

    return result
