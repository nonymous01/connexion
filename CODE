for requirement in requirements_list:
    requirement, extra = get_requirement_with_extras(requirement)
    is_zip_url = requirement.startswith("http") and requirement.endswith(".zip")

    if is_zip_url:
        install_zip_package(requirement, target="python")
    else:
        install_cmd = [sys.executable, "-m", "pip", "install", requirement, "-t", "python"]
        
        if extra:
            install_cmd.append(extra)
        
        print(f"Installing: {' '.join(install_cmd)}")
        subprocess.check_call(install_cmd)

----------------------------------------------------------------------------for-----------------------------------------------------


def install_zip_package(url, target="python"):
    """
    Downloads a .zip package from a given URL, extracts it, and installs it using pip into the target directory.
    This is useful for packaging Python dependencies into a folder (e.g. 'python/') to be zipped and uploaded as a Lambda Layer.
    """
    import tempfile

    # Create a temporary working directory
    with tempfile.TemporaryDirectory() as tmp_dir:
        zip_path = os.path.join(tmp_dir, "package.zip")

        print(f" Downloading from {url}")
        urlretrieve(url, zip_path)

        # Extract the zip archive
        extract_path = os.path.join(tmp_dir, "extracted")
        os.makedirs(extract_path, exist_ok=True)

        print(f" Extracting archive to {extract_path}")
        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(extract_path)

        # Install the extracted package using pip into the target directory
        print(f" Installing extracted package into {target}")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", extract_path, "-t", target
        ])




for requirement in requirements_list:
    if requirement.startswith("http") and requirement.endswith(".zip"):
        install_zip_package(requirement, target="python")
    else:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", requirement, "-t", "python"
        ])










voici la solution que tu dois mettre en place. Jâ€™ai commence a le faire avec la fonction install_zip_package je sais pas si tu as vu.

import os
import zipfile
import shutil
import subprocess
import sys
import tempfile
from urllib.request import urlretrieve

# Step 1: Download the repository as a zip file
zip_url = "https://github.com/mlflow/mlflow-export-import/archive/refs/heads/master.zip"
zip_path = os.path.join(tempfile.gettempdir(), "mlflow-export-import.zip")
urlretrieve(zip_url, zip_path)

# Step 2: Unzip the downloaded file
extract_dir = os.path.join(tempfile.gettempdir(), "mlflow-export-import-master")
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(tempfile.gettempdir())

# Step 3: Install the package into the 'python' directory
target_dir = os.path.abspath("python")
os.makedirs(target_dir, exist_ok=True)
package_dir = os.path.join(tempfile.gettempdir(), "mlflow-export-import-master", "mlflow-export-import-master")
if not os.path.isdir(package_dir):
    # Sometimes the extracted folder may not be nested
    package_dir = os.path.join(tempfile.gettempdir(), "mlflow-export-import-master")
subprocess.check_call([
    sys.executable, "-m", "pip", "install", package_dir, "--target", target_dir
])

# Optional: Clean up
os.remove(zip_path)
shutil.rmtree(extract_dir, ignore_errors=True)
