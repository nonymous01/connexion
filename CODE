from dotenv import dotenv_values
from f1ai_client import f1ai_client
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_config():
    """Load environment configuration from .env file"""
    try:
        config = dotenv_values('.env')
        token = config.get("EU_WEST_1_TOKEN")
        
        if not token:
            raise ValueError("EU_WEST_1_TOKEN not found in .env file")
        
        return token
    except Exception as e:
        logger.error(f"Error loading configuration: {e}")
        raise

def initialize_client(token):
    """Initialize F1AI client with proper error handling"""
    try:
        client = f1ai_client.init(token)
        logger.info("F1AI client initialized successfully")
        return client
    except Exception as e:
        logger.error(f"Error initializing F1AI client: {e}")
        raise

def check_model_exists(client, model_name, model_version=None):
    """Check if model exists before promoting"""
    try:
        # Try to get model information first
        response = client.get_model_info(
            model_name=model_name,
            model_version=model_version
        )
        logger.info(f"Model {model_name} found: {response}")
        return True
    except Exception as e:
        logger.warning(f"Model {model_name} not found or error checking: {e}")
        return False

def promote_model(client, model_name, model_version, model_source):
    """Promote model with proper error handling and validation"""
    try:
        # Validate inputs
        valid_sources = ['databricks_registry', 'databricks_uc', 'aws_model_registry']
        if model_source not in valid_sources:
            raise ValueError(f"Invalid model_source. Must be one of: {valid_sources}")
        
        logger.info(f"Attempting to promote model: {model_name}, version: {model_version}")
        
        # Optional: Check if model exists first
        if hasattr(client, 'get_model_info'):
            if not check_model_exists(client, model_name, model_version):
                logger.warning("Model may not exist, but proceeding with promotion attempt")
        
        # Promote the model
        response_json = client.promote_model_registration(
            model_name=model_name,
            model_version=model_version,
            model_source=model_source
        )
        
        # Check response status
        if response_json.get('status') == 'SUCCESS':
            logger.info(f"Model promotion successful: {response_json}")
        else:
            logger.error(f"Model promotion failed: {response_json}")
        
        return response_json
        
    except Exception as e:
        logger.error(f"Error promoting model: {e}")
        return {'status': 'FAILURE', 'message': str(e)}

def process():
    """Main processing function"""
    try:
        # Load configuration
        token = load_config()
        
        # Initialize client
        client = initialize_client(token)
        
        # Model configuration
        model_config = {
            'model_name': 'irisclassifier',
            'model_version': 1,
            'model_source': 'databricks_uc'  # Options: 'databricks_registry'|'databricks_uc'|'aws_model_registry'
        }
        
        # Promote model
        response = promote_model(
            client=client,
            **model_config
        )
        
        # Print results
        print("=" * 50)
        print("MODEL PROMOTION RESULT:")
        print("=" * 50)
        print(f"Status: {response.get('status', 'UNKNOWN')}")
        print(f"Message: {response.get('message', 'No message')}")
        
        if response.get('status') == 'SUCCESS':
            print("✅ Model promotion completed successfully!")
        else:
            print("❌ Model promotion failed!")
            print("\nTroubleshooting suggestions:")
            print("1. Verify the model exists in the specified source")
            print("2. Check AWS credentials and permissions")
            print("3. Ensure the token has proper permissions")
            print("4. Verify the model_source parameter is correct")
        
        return response
        
    except Exception as e:
        logger.error(f"Process failed: {e}")
        print(f"❌ Process failed with error: {e}")
        return {'status': 'FAILURE', 'message': str(e)}

if __name__ == "__main__":
    result = process()
